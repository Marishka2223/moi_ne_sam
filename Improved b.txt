<?php

// Имитация класса Request (упрощённая версия)
class Request
{
    public $request;

    public function __construct()
    {
        $this->request = $_POST;
    }

    public function input($key)
    {
        return $this->request[$key] ?? null;
    }

    public function validate($rules)
    {
        foreach ($rules as $field => $rule) {
            if (!isset($this->request[$field])) {
                throw new Exception("Validation failed: $field is required.");
            }
        }
    }
}

// Имитация модели Bb (упрощённая версия)
class Bb
{
    public $id;
    public $title;
    public $price;
    public $status;

    public static function findOrFail($id)
    {
        // Имитация поиска подписки в базе данных
        $subscription = new self();
        $subscription->id = $id;
        $subscription->title = 'Basic';
        $subscription->price = 3;
        $subscription->status = 'Активно';
        return $subscription;
    }

    public function update($data)
    {
        // Имитация обновления подписки
        foreach ($data as $key => $value) {
            $this->$key = $value;
        }
    }
}

// Имитация маршрутизатора (упрощённая версия)
class Router
{
    public static function get($uri, $callback)
    {
        if ($_SERVER['REQUEST_METHOD'] === 'GET' && $_SERVER['REQUEST_URI'] === $uri) {
            echo $callback();
        }
    }

    public static function post($uri, $callback)
    {
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['REQUEST_URI'] === $uri) {
            $request = new Request();
            $callback($request);
        }
    }
}

// Обработка GET-запроса для страницы улучшения плана
Router::get('/upgrade-plan/{id}', function () {
    // Получаем ID из URL (упрощённо)
    $id = explode('/', $_SERVER['REQUEST_URI'])[2];

    // Получаем текущую подписку
    $subscription = Bb::findOrFail($id);

    // Определяем доступные варианты улучшения
    $availablePlans = [];
    if ($subscription->price == 3) {
        $availablePlans = [
            ['title' => 'Duck+', 'price' => 6],
            ['title' => 'Duck PREMIUM', 'price' => 12],
        ];
    } elseif ($subscription->price == 6) {
        $availablePlans = [
            ['title' => 'Duck PREMIUM', 'price' => 12],
        ];
    }

    // Генерация HTML
    $html = <<<HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Улучшение плана</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .subscription-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        .subscription-column {
            border: 2px solid #ccc;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            flex: 1;
        }
        .subscription-column button {
            background-color: #ffa500;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .subscription-column button:hover {
            background-color: rgb(245, 188, 82);
        }
    </style>
</head>
<body>
<div style="display: flex; flex-direction: column;">
    <h1 style="display: flex; justify-content: center; font-size: 3em;">Улучшение плана</h1>
    <br><br><br>

    <div class="subscription-container">
HTML;

    foreach ($availablePlans as $plan) {
        $html .= <<<HTML
        <div class="subscription-column">
            <h2>{$plan['title']}</h2>
            <p>Срок: {$plan['price']} месяцев</p>
            <form action="/upgrade-plan/{$subscription->id}" method="POST">
                <input type="hidden" name="title" value="{$plan['title']}">
                <input type="hidden" name="price" value="{$plan['price']}">
                <button type="submit">Выбрать</button>
            </form>
        </div>
HTML;
    }

    $html .= <<<HTML
    </div>
</div>
</body>
</html>
HTML;

    return $html;
});

// Обработка POST-запроса для улучшения плана
Router::post('/upgrade-plan/{id}', function (Request $request) {
    // Получаем ID из URL (упрощённо)
    $id = explode('/', $_SERVER['REQUEST_URI'])[2];

    // Валидация данных
    $request->validate([
        'title' => 'required',
        'price' => 'required',
    ]);

    // Обновляем подписку
    $subscription = Bb::findOrFail($id);
    $subscription->update([
        'title' => $request->input('title'),
        'price' => $request->input('price'),
        'status' => 'Активно',
    ]);

    // Перенаправляем пользователя (упрощённо)
    header('Location: /user');
    exit;
});

// Запуск маршрутизатора
$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$_SERVER['REQUEST_URI'] = $uri;

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    Router::get($uri, function () {});
} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    Router::post($uri, function ($request) {});
}
