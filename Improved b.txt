### Информационно-логическая модель системы для музыкального стримингового сервиса "Duck Player"

Информационно-логическая модель (ИЛМ) описывает структуру данных, их взаимосвязи и основные процессы в системе. Для разработки сайта на Laravel с функцией регистрации, авторизации и оформления подписки на музыкальный стриминговый сервис "Duck Player" можно выделить следующие сущности и их связи.

---

### Основные сущности системы:
1. **Пользователь (User)**
   - id (Primary Key)
   - name (имя пользователя)
   - email (электронная почта)
   - password (пароль)
   - role (роль: пользователь, администратор)
   - created_at (дата регистрации)
   - updated_at (дата обновления)

2. **Подписка (Subscription)**
   - id (Primary Key)
   - user_id (Foreign Key → User)
   - plan_id (Foreign Key → SubscriptionPlan)
   - start_date (дата начала подписки)
   - end_date (дата окончания подписки)
   - status (статус подписки: активна, истекла, отменена)

3. **Тарифный план (SubscriptionPlan)**
   - id (Primary Key)
   - name (название тарифа)
   - price (цена)
   - duration (длительность подписки в днях)
   - features (описание возможностей тарифа)

4. **Музыкальный трек (Track)**
   - id (Primary Key)
   - title (название трека)
   - artist (исполнитель)
   - album (альбом)
   - duration (длительность трека)
   - file_path (путь к аудиофайлу)
   - cover_path (путь к обложке)
   - created_at (дата добавления)
   - updated_at (дата обновления)

5. **Плейлист (Playlist)**
   - id (Primary Key)
   - user_id (Foreign Key → User)
   - name (название плейлиста)
   - description (описание плейлиста)
   - created_at (дата создания)
   - updated_at (дата обновления)

6. **Треки в плейлисте (PlaylistTrack)**
   - id (Primary Key)
   - playlist_id (Foreign Key → Playlist)
   - track_id (Foreign Key → Track)
   - order (порядок трека в плейлисте)

7. **Платеж (Payment)**
   - id (Primary Key)
   - user_id (Foreign Key → User)
   - subscription_id (Foreign Key → Subscription)
   - amount (сумма платежа)
   - payment_date (дата платежа)
   - status (статус платежа: успешно, ошибка)

---

### Связи между сущностями:
1. **Пользователь (User)** может иметь одну активную **Подписку (Subscription)**.
2. **Подписка (Subscription)** связана с **Тарифным планом (SubscriptionPlan)**.
3. **Пользователь (User)** может создавать несколько **Плейлистов (Playlist)**.
4. **Плейлист (Playlist)** может содержать несколько **Треков (Track)** через таблицу **Треки в плейлисте (PlaylistTrack)**.
5. **Платеж (Payment)** связан с **Пользователем (User)** и **Подпиской (Subscription)**.

---

### Диаграмма информационно-логической модели:
Ниже приведено текстовое описание диаграммы. Для визуализации можно использовать инструменты, такие как Lucidchart, Draw.io или MySQL Workbench.

```
+----------------+       +----------------+       +-------------------+
|    User        |       | Subscription   |       | SubscriptionPlan  |
|----------------|       |----------------|       |-------------------|
| id (PK)        |<------| user_id (FK)   |       | id (PK)           |
| name           |       | plan_id (FK)   |------>| name              |
| email          |       | start_date     |       | price             |
| password       |       | end_date       |       | duration          |
| role           |       | status         |       | features          |
| created_at     |       +----------------+       +-------------------+
| updated_at     |
+----------------+
        |
        | 1
        | *
+----------------+       +-------------------+
| Playlist       |       | PlaylistTrack     |
|----------------|       |-------------------|
| id (PK)        |<------| playlist_id (FK)  |
| user_id (FK)   |       | track_id (FK)     |
| name           |       | order             |
| description    |       +-------------------+
| created_at     |               |
| updated_at     |               | *
+----------------+               |
        |                        |
        | 1                      |
        | *                      |
+----------------+               |
| Track          |<--------------+
|----------------|
| id (PK)        |
| title          |
| artist         |
| album          |
| duration       |
| file_path      |
| cover_path     |
| created_at     |
| updated_at     |
+----------------+
        |
        | *
+----------------+
| Payment        |
|----------------|
| id (PK)        |
| user_id (FK)   |
| subscription_id|
| amount         |
| payment_date   |
| status         |
+----------------+
```

---

### Описание процессов:
1. **Регистрация и авторизация:**
   - Пользователь регистрируется, вводя свои данные (имя, email, пароль).
   - После регистрации пользователь может авторизоваться в системе.

2. **Оформление подписки:**
   - Пользователь выбирает тарифный план.
   - Система создает запись о подписке и связывает ее с пользователем.
   - Пользователь оплачивает подписку через платежную систему.
   - После успешной оплаты статус подписки становится активным.

3. **Работа с плейлистами:**
   - Пользователь может создавать плейлисты и добавлять в них треки.
   - Треки могут быть добавлены из библиотеки сервиса.

4. **Просмотр и прослушивание треков:**
   - Пользователь может искать треки, просматривать их и добавлять в плейлисты.
   - Для прослушивания треков требуется активная подписка.

---

### Заключение:
Данная информационно-логическая модель описывает основные сущности и их взаимосвязи в системе "Duck Player". Она может быть реализована на Laravel с использованием миграций для создания таблиц в базе данных и моделей Eloquent для работы с данными.
